{"task_url":"https://www.codechef.com/NOV20B/problems/RB2CNF","statement":{"HTML":{"html":"\n<html>\n\t<head>\n\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/3.0.1/github-markdown.min.css\">\n\t\t<script type=\"text/x-mathjax-config\">\n\t\t\tMathJax.Hub.Config({\n\t\t\t\ttex2jax: {inlineMath: [['$','$']]}\n\t\t\t});\n\t\t</script>\n\t\t<script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>\n\t\t<style>\n\t\t\t.markdown-body {\n\t\t\t\tbackground-color: white;\n\t\t\t\tpadding-bottom: 20px;\n\t\t\t}\n\t\t\t.markdown-body code {\n\t\t\t\tcolor: #24292e;\n\t\t\t}\n\t\t\t.solution-visible-txt {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body class=\"markdown-body\">\n\t\t<h1>Red-Black Boolean Expression</h1>\n<h3>Read problem statements in <a href=\"http://www.codechef.com/download/translated/NOV20/hindi/RB2CNF.pdf\">Hindi</a>, <a href=\"http://www.codechef.com/download/translated/NOV20/bengali/RB2CNF.pdf\">Bengali</a>, <a href=\"http://www.codechef.com/download/translated/NOV20/mandarin/RB2CNF.pdf\">Mandarin Chinese</a>, <a href=\"http://www.codechef.com/download/translated/NOV20/russian/RB2CNF.pdf\">Russian</a>, and <a href=\"http://www.codechef.com/download/translated/NOV20/vietnamese/RB2CNF.pdf\">Vietnamese</a> as well.</h3>\n<p>Let $S$ be a set of $N$ boolean variables $X_1, X_2, \\ldots, X_N$ and their negations $\\neg X_1, \\neg X_2, \\ldots, \\neg X_N$. You are given the initial values of all variables.</p>\n<p>A <em>2-CNF boolean expression</em> is defined as a <a href=\"https://en.wikipedia.org/wiki/Logical_conjunction\">conjunction</a> of clauses, where each clause is a <a href=\"https://en.wikipedia.org/wiki/Logical_disjunction\">disjunction</a> of two elements of the set $S$. Ada constructed a 2-CNF boolean expression $B$ with $M$ clauses as follows: </p>\n<ul>\n<li>First, Ada painted each of the variables $X_1, X_2, \\ldots, X_N$ with one colour ― either red or black.</li>\n<li>Then, she painted the negated variables ― for each valid $i$, if $X_i$ is painted red, then $\\neg X_i$ is painted black, and vice versa (if $X_i$ is black, $\\neg X_i$ is painted red).</li>\n<li>Finally, she wrote the boolean expression $B = (P_1 \\lor Q_1) \\wedge (P_2 \\lor Q_2) \\wedge \\ldots \\wedge (P_M \\lor Q_M)$, in such a way that no clause contains two variables with the same colour and $P_i \\neq \\neg Q_i$ for each clause.</li>\n</ul>\n<p>Ada wants the expression to evaluate to &quot;true&quot;. In order to achieve that, she may change the values of variables; for each valid $i$, changing the value of $X_i$ (from &quot;true&quot; to &quot;false&quot; or vice versa) is $C_i$. Find the minimum total cost needed to make the expression $B$ evaluate to &quot;true&quot; or determine that it is impossible.</p>\n<p>Note that you are not given the colours of variables, but it is guaranteed that the expression $B$ is chosen in such a way that there is at least one valid way to assign colours and the minimum cost is the same for each valid assignment of colours.</p>\n<h3>Input</h3>\n<ul>\n<li>The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.</li>\n<li>The first line of each test case contains two space-separated integers $N$ and $M$.</li>\n<li>The second line contains a binary string $S$ with length $N$ describing the initial values of the variables. For each valid $i$, the $i$-th character of $S$ is '1' if $X_i$ is true or '0' if $X_i$ is false.</li>\n<li>The third line contains $N$ space-separated integers $C_1, C_2, \\ldots, C_N$.</li>\n<li>$M$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $P_i$ and $Q_i$. For each valid $i$, the variable $X_i$ is represented by the integer $i$ and its negation is represented by $-i$.</li>\n</ul>\n<h3>Output</h3>\n<p>For each test case, print a single line containing one integer ― the minimum cost needed to make the boolean expression evaluate to &quot;true&quot;, or $-1$ if it is impossible.</p>\n<h3>Constraints</h3>\n<ul>\n<li>$1 \\le T \\le 10^5$</li>\n<li>$1 \\le N \\le 256$</li>\n<li>$1 \\le C_i \\le 256$ for each valid $i$</li>\n<li>$1 \\le |P_i|, |Q_i| \\le N$ for each valid $i$</li>\n<li>each character of $S$ is either '0' or '1'</li>\n<li>the sum of $M$ over all test cases does not exceed $43,210$</li>\n</ul>\n<h3>Subtasks</h3>\n<p><strong>Subtask #1 (1 points):</strong> $N \\le 10$</p>\n<p><strong>Subtask #2 (99 points):</strong> original constraints</p>\n<h3>Example Input</h3>\n<pre><code>1\n3 3\n101\n1 2 3\n-1 -2\n-1 -3\n2 1\n</code></pre>\n<h3>Example Output</h3>\n<pre><code>3\n</code></pre>\n<h3>Explanation</h3>\n<p><strong>Example case 1:</strong> The expression $B$ is $(\\neg X_1 \\lor \\neg X_2) \\wedge (\\neg X_1 \\lor \\neg X_3) \\wedge (X_2 \\lor X_1)$. Ada generated this expression by painting $X_2$ and $X_3$ in red and $X_1$ in black.</p>\n<p>One optimal way to make the expression true is changing the value of $X_3$.</p>\n\n\t<body>\n</html>"}}}